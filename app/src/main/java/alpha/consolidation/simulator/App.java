/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package alpha.consolidation.simulator;

import java.util.List;
import java.util.Optional;
import java.util.ArrayList;

import picocli.CommandLine;
import picocli.CommandLine.Option;
import picocli.CommandLine.Command;
import alpha.consolidation.simulator.types.Action;
import alpha.consolidation.simulator.types.Info;
import alpha.consolidation.simulator.types.State;
import alpha.consolidation.simulator.utils.ApiSingletone;
import alpha.consolidation.simulator.utils.Constants;

@Command(description = "Simulate a VNF Consolidation Scenario", mixinStandardHelpOptions = true, version = "0.0.1")
public class App implements Runnable {
  @Option(names = { "-f", "--file" }, description = "Path of topology file")
  static String file_path;
  @Option(names = { "-a",
      "--algorithm" }, description = "Algorithm to use", required = false, defaultValue = "RANDOM")
  static InferenceAlgorithm algorithm;
  @Option(names = { "-d", "--debug" }, description = "Print debug info", required = false, defaultValue = "false")
  static boolean debug;
  @Option(names = { "-u",
      "--upload" }, description = "Upload results to remote DB", required = false, defaultValue = "true")
  static boolean upload;
  @Option(names = { "-i",
      "--api-server" }, description = "API Server URL", required = false, defaultValue = Constants.DEFAULT_API_SERVER)
  static String api_server;

  final static List<State> states = new ArrayList<>();
  final static List<Action> actions = new ArrayList<>();
  final static List<Info> infos = new ArrayList<>();

  public void run() {
    // 1. setup Singleton
    ApiSingletone.setInstance(api_server);

    // 2. create Environment
    Env env = new Env(file_path);
    // 3. reset Environment
    State state = env.reset();
    // 4. create Agent
    Agent agent = new Agent(algorithm);

    // 5. run Simulation.
    // for (int i = 1; i < Constants.MAX_EPISODE_LEN; ++i) { (TODO: Change)
    for (int i = 1; i < 2; ++i) {
      states.add(state);
      Optional<Action> action = agent.inference(state);
      if (!action.isPresent()) {
        actions.add(new Action()); // TODO
        infos.add(new Info()); // TODO
        break;
      } else {
        actions.add(action.get());
        infos.add(env.getResult());
        state = env.step(action.get());
      }
    }
    states.add(state);

    // Print Debug Info.
    if (debug) {
      for (int i = 0; i < actions.size(); ++i) {
        System.out.printf(
            "Episode: %d, State: %s, Action: %s%n",
            i + 1,
            states.get(i).toString(),
            actions.get(i).toString());
      }
      System.out.printf("Init State: %s%n", states.get(0).toString());
      System.out.printf("Final State: %s%n", state.toString());
    }

    // Upload results to remote DB.
    if (upload) {
      System.out.println("Saving results to remote DB...");
      agent.submit(states, actions, infos);
    }
    System.out.println("Done...");
  }

  public static void main(String[] args) {
    new CommandLine(new App()).execute(args);
  }
}
